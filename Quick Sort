/*
   Program has been created by Platoframe technologies Pvt. Ltd. at  1:46 AM on 25/07/2016
   Quick_sort program helps to sort the problem by the use of divide and conquer method.
-  Method to perform this algorithm ->
-> PIVOT // IT CAN BE FIRST , MIDDLE , LAST ( DEPENDS UPON REFERENCE TO REFERENCE ).
-> LESS THAN PIVOT GOES TO LEFT AND GREATER THAN GOES TO RIGHT.
-> BY THE USE OF RECURSION WE CAN EASILY SORT OUR NUMERIC DATA.
*/

#include <iostream>
using namespace std;

void swap(int *a, int *b){
   int t = *a;
   *a = *b;
   *b = t;
   }

int partition(int arr[],int left, int right){ 
      int i = (left-1); 
      int pivot = arr[right];

for(int j = left ; j <= (right-1) ; j++ ){

if( arr[j] <= pivot ){
i++;
swap(&arr[i],&arr[j]);
}

}
swap(&arr[i+1],&arr[right]);
return (i+1);
}

int quick_sort(int arr[], int left , int right){

if(left < right){
    int q = partition(arr,left,right);
    quick_sort(arr,left,q-1);
     quick_sort(arr,q+1,right);
}
}

void print(int arr[],int n) {
for(int i = 0 ; i <= n ; i++){
cout <<arr[i]<<" ";
}

}

int main(){
int a;
cout << "Enter the no of the element you want to sort";
cin  >> a;
int arr[a];
for(int i = 0 ; i <= a ; i++){
        cout<<"Enter element no " << i << " : ";
cin >> arr[i];
}

quick_sort(arr,0,a);
int n = (sizeof(arr)/sizeof(arr[0]));
print(arr,n);
return 0;

}


