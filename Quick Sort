/*
   Program has been created by Platoframe technologies Pvt. Ltd. at  1:46 AM on 25/07/2016
   Quick_sort program helps to sort the problem by the use of divide and conquer method.
-  Method to perform this algorithm ->
-> PIVOT // IT CAN BE FIRST , MIDDLE , LAST ( DEPENDS UPON REFERENCE TO REFERENCE ).
-> LESS THAN PIVOT GOES TO LEFT AND GREATER THAN GOES TO RIGHT.
-> BY THE USE OF RECURSION WE CAN EASILY SORT OUR NUMERIC DATA.
*/

#include <iostream>
using namespace std;

void swap(int * a , int* b){
int t = *a;
*a = *b;
*b = t;
}
int partition(int a[],int left,int right){

int pivot = a[right];
int i = left - 1;

for(int j = left; j <= right-1; j++)
{
if(a[j]<=pivot){
    i++;
    swap(&a[i],&a[j]);
}

swap(&a[i+1],&a[right]);
return (i+1);
}
}

void quicksort(int arr[],int left,int right){

if(left < right ){

int    q = partition(arr,left,right);
    quicksort(arr,left,right-1);
    quicksort(arr,left+1,right);
}


}
void printArray(int arr[], int size)
{
    int i;
    for (i=0; i < size; i++)
       cout << arr[i]<<" ";

}
int main(){

int i,s,b;
cout <<" How many test cases you would like to add ? ";
cin >> b;
for(int s = 1; s<=b;s++){
cout << " How many elements you would like to add ?";
cin  >> i;
int arr[i];

cout << " Enter the elements - >";

for(int j = 0; j <= i-1; j++){
cin >> arr[j];
}

int n = (sizeof(arr)/sizeof(arr[0]));
quicksort(arr,0,n-1);

    printArray(arr, n);
}
 return 0;
}
