//Floyd's Warshall all pair shortest path algorithm 

  1---(11)--2
  | \      /|
  | (6)   / |
  |   \ (7) |
 (1) / \   (3)
  | /    \  |
  |/      \ |
  3---(2)---4

#include <iostream>
#define V 4

using namespace std;

void print(int arr[][V]){

for(int i = 0 ; i < V ; i++) {
        cout << endl;
    for(int j = 0 ; j< V ;j++){

    cout << arr[i][j] << " ";}
}
}
int compute(int arr[][V]){
 int dist[V][V], i, j, k;

 for (i = 0; i < V; i++) // copying all the data from our argument 
    for (j = 0; j < V; j++) 
        dist[i][j] = arr[i][j]; // into the newly created array 

for (k = 0; k < V; k++) // set of 1 to n from 0 | or | vertex we are going to include in our path 
    
    {
        for (i = 0; i < V; i++)
        {
            for (j = 0; j < V; j++)
            {
                if (dist[i][j] > dist[i][k] + dist[k][j] )
                    dist[i][j] = dist[i][k] + dist[k][j];
            }
        }

    }
print(dist);
}

int main(){
int arr[V][V] = { 0  , 11 , 1 , 6 ,            // here we are going to deal with undirected  positive weighted graph  
                  11 ,  0 , 7 , 3 ,            
                  1  ,  7 , 0 , 2 ,
                  6  ,  3 , 2 , 0    };
compute(arr); // this is our driver program to test the all pair shortest path algorithm
return 0;
}


